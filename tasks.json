{
  "tasks": [
    {
      "id": "353eb02c-a04a-4215-b1d3-37571a411223",
      "name": "Memperluas CourseRepository dengan metode filtering dan sorting",
      "description": "Menambahkan metode baru di CourseRepository untuk mendukung filtering berdasarkan kategori, harga (gratis/berbayar), dan sorting (terbaru, terpopuler, harga). Metode ini akan memperluas fungsionalitas yang sudah ada tanpa merusak implementasi existing.",
      "notes": "Pastikan menggunakan eager loading untuk menghindari N+1 query problem. Gunakan scope yang sudah ada jika memungkinkan.",
      "status": "completed",
      "dependencies": [],
      "createdAt": "2025-08-30T06:02:18.741Z",
      "updatedAt": "2025-08-30T06:13:24.898Z",
      "relatedFiles": [
        {
          "path": "app/Repositories/CourseRepository.php",
          "type": "TO_MODIFY",
          "description": "File repository utama yang akan ditambahkan metode filtering",
          "lineStart": 1,
          "lineEnd": 100
        },
        {
          "path": "app/Repositories/CourseRepositoryInterface.php",
          "type": "TO_MODIFY",
          "description": "Interface yang perlu ditambahkan method signature baru",
          "lineStart": 1,
          "lineEnd": 50
        }
      ],
      "implementationGuide": "1. Buka file app/Repositories/CourseRepository.php\n2. Tambahkan metode getCoursesWithFilters($filters = [], $sort = null, $perPage = 12)\n3. Implementasi filtering:\n   - category_id: whereHas('category', function($q) use ($categoryId) { $q->where('id', $categoryId); })\n   - price_type: where('price', $priceType === 'free' ? 0 : '>', 0)\n4. Implementasi sorting:\n   - 'latest': orderBy('created_at', 'desc')\n   - 'popular': orderBy('total_students', 'desc')\n   - 'price_low': orderBy('price', 'asc')\n   - 'price_high': orderBy('price', 'desc')\n5. Return paginated results dengan eager loading category dan instructor",
      "verificationCriteria": "Metode baru dapat melakukan filtering berdasarkan kategori dan harga, serta sorting sesuai parameter yang diberikan. Hasil query harus ter-paginate dan menggunakan eager loading.",
      "analysisResult": "Implementasi fitur pencarian dan pemfilteran pada halaman katalog kursus front-end dengan menggunakan arsitektur repository pattern yang sudah ada, Alpine.js untuk interaktivitas, dan AJAX untuk real-time filtering. Solusi ini akan meningkatkan user experience dengan filtering yang responsif tanpa reload halaman, sambil mempertahankan konsistensi dengan desain dan arsitektur yang sudah ada.",
      "summary": "Saya telah berhasil mengimplementasikan metode getCoursesWithFilters di CourseRepository dan menambahkan method signature di CourseRepositoryInterface. Implementasi ini mendukung filtering berdasarkan kategori (category_id), harga (free/paid), dan pencarian (search). Metode ini juga mendukung sorting berdasarkan terbaru (latest), terpopuler (popular), harga terendah (price_low), dan harga tertinggi (price_high). Hasil query telah di-paginate dan menggunakan eager loading untuk menghindari N+1 query problem dengan relasi category, courseMentors.mentor, dan withCount untuk courseStudents dan courseSections.",
      "completedAt": "2025-08-30T06:13:24.895Z"
    },
    {
      "id": "137d2b20-bb30-41cb-a4ac-82e4768583e0",
      "name": "Update CourseService untuk mendukung filtering dan sorting",
      "description": "Menambahkan metode di CourseService yang akan memanggil repository method baru untuk filtering dan sorting. Service layer ini akan menjadi penghubung antara controller dan repository.",
      "notes": "Tambahkan validasi input untuk memastikan parameter yang diterima valid. Gunakan konstanta untuk nilai sorting yang diizinkan.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "353eb02c-a04a-4215-b1d3-37571a411223"
        }
      ],
      "createdAt": "2025-08-30T06:02:18.741Z",
      "updatedAt": "2025-08-30T06:02:18.741Z",
      "relatedFiles": [
        {
          "path": "app/Services/CourseService.php",
          "type": "TO_MODIFY",
          "description": "Service layer yang akan ditambahkan metode filtering",
          "lineStart": 1,
          "lineEnd": 100
        }
      ],
      "implementationGuide": "1. Buka file app/Services/CourseService.php\n2. Tambahkan metode getFilteredCourses($filters = [], $sort = null, $perPage = 12)\n3. Validasi input parameters:\n   - $filters: array dengan key category_id, price_type\n   - $sort: string dengan nilai latest, popular, price_low, price_high\n4. Panggil $this->courseRepository->getCoursesWithFilters($filters, $sort, $perPage)\n5. Return hasil dengan format yang konsisten",
      "verificationCriteria": "Service dapat menerima parameter filtering dan sorting, melakukan validasi, dan mengembalikan hasil yang ter-format dengan benar.",
      "analysisResult": "Implementasi fitur pencarian dan pemfilteran pada halaman katalog kursus front-end dengan menggunakan arsitektur repository pattern yang sudah ada, Alpine.js untuk interaktivitas, dan AJAX untuk real-time filtering. Solusi ini akan meningkatkan user experience dengan filtering yang responsif tanpa reload halaman, sambil mempertahankan konsistensi dengan desain dan arsitektur yang sudah ada."
    },
    {
      "id": "5f84bf15-ce84-4ff9-b59d-e815eca940ce",
      "name": "Menambahkan AJAX endpoint di FrontController",
      "description": "Membuat endpoint AJAX di FrontController untuk menangani request filtering dan sorting secara real-time tanpa reload halaman. Endpoint ini akan mengembalikan data JSON untuk diproses oleh frontend.",
      "notes": "Pastikan response JSON konsisten dan include pagination info. Tambahkan error handling untuk request yang tidak valid.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "137d2b20-bb30-41cb-a4ac-82e4768583e0"
        }
      ],
      "createdAt": "2025-08-30T06:02:18.741Z",
      "updatedAt": "2025-08-30T06:02:18.741Z",
      "relatedFiles": [
        {
          "path": "app/Http/Controllers/FrontController.php",
          "type": "TO_MODIFY",
          "description": "Controller yang akan ditambahkan endpoint AJAX",
          "lineStart": 1,
          "lineEnd": 100
        }
      ],
      "implementationGuide": "1. Buka file app/Http/Controllers/FrontController.php\n2. Tambahkan metode filterCourses(Request $request)\n3. Validasi request parameters:\n   - category_id: nullable|exists:categories,id\n   - price_type: nullable|in:free,paid\n   - sort: nullable|in:latest,popular,price_low,price_high\n   - search: nullable|string\n4. Panggil CourseService->getFilteredCourses()\n5. Return JSON response dengan struktur:\n   {\n     \"success\": true,\n     \"data\": {\n       \"courses\": [...],\n       \"pagination\": {...}\n     }\n   }",
      "verificationCriteria": "Endpoint AJAX dapat menerima parameter filtering, melakukan validasi, dan mengembalikan response JSON yang valid dengan data kursus dan pagination.",
      "analysisResult": "Implementasi fitur pencarian dan pemfilteran pada halaman katalog kursus front-end dengan menggunakan arsitektur repository pattern yang sudah ada, Alpine.js untuk interaktivitas, dan AJAX untuk real-time filtering. Solusi ini akan meningkatkan user experience dengan filtering yang responsif tanpa reload halaman, sambil mempertahankan konsistensi dengan desain dan arsitektur yang sudah ada."
    },
    {
      "id": "c428588b-8211-474a-94cf-930de0aa1727",
      "name": "Implementasi UI pencarian dan filter di halaman katalog",
      "description": "Menambahkan komponen UI untuk pencarian, filtering berdasarkan kategori dan harga, serta sorting di halaman course-catalog.blade.php. UI akan menggunakan Alpine.js untuk interaktivitas dan AJAX untuk real-time filtering.",
      "notes": "Gunakan komponen x-course-card yang sudah ada untuk menampilkan hasil. Pastikan responsive design dan accessibility. Gunakan warna brand dari app.css.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "5f84bf15-ce84-4ff9-b59d-e815eca940ce"
        }
      ],
      "createdAt": "2025-08-30T06:02:18.741Z",
      "updatedAt": "2025-08-30T06:02:18.741Z",
      "relatedFiles": [
        {
          "path": "resources/views/front/course-catalog.blade.php",
          "type": "TO_MODIFY",
          "description": "Halaman katalog yang akan ditambahkan UI filtering",
          "lineStart": 1,
          "lineEnd": 122
        },
        {
          "path": "resources/css/app.css",
          "type": "REFERENCE",
          "description": "File CSS untuk referensi warna brand",
          "lineStart": 30,
          "lineEnd": 60
        }
      ],
      "implementationGuide": "1. Buka file resources/views/front/course-catalog.blade.php\n2. Tambahkan section filter di atas daftar kursus:\n   - Search input dengan placeholder \"Cari kursus...\"\n   - Dropdown kategori (ambil dari database)\n   - Radio button untuk filter harga (Semua, Gratis, Berbayar)\n   - Dropdown sorting (Terbaru, Terpopuler, Harga Terendah, Harga Tertinggi)\n3. Implementasi Alpine.js component:\n   - Data: filters, courses, loading, pagination\n   - Methods: applyFilters(), resetFilters(), loadMore()\n4. Styling menggunakan warna brand Lochmara dan class cursor-pointer\n5. Tambahkan loading state dan empty state",
      "verificationCriteria": "UI filtering dan pencarian berfungsi dengan baik, responsive, menggunakan warna brand yang konsisten, dan memberikan feedback visual yang jelas kepada user.",
      "analysisResult": "Implementasi fitur pencarian dan pemfilteran pada halaman katalog kursus front-end dengan menggunakan arsitektur repository pattern yang sudah ada, Alpine.js untuk interaktivitas, dan AJAX untuk real-time filtering. Solusi ini akan meningkatkan user experience dengan filtering yang responsif tanpa reload halaman, sambil mempertahankan konsistensi dengan desain dan arsitektur yang sudah ada."
    },
    {
      "id": "81f28b16-add8-474c-a538-d6a397f687cb",
      "name": "Menambahkan rute AJAX dan integrasi JavaScript",
      "description": "Menambahkan rute untuk endpoint AJAX filtering dan mengimplementasikan JavaScript untuk menangani request AJAX, update DOM, dan pagination. Integrasi ini akan membuat filtering berjalan secara real-time.",
      "notes": "Gunakan fetch API untuk AJAX requests. Implementasi error handling yang user-friendly. Pastikan URL tetap SEO-friendly dengan history API.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "c428588b-8211-474a-94cf-930de0aa1727"
        }
      ],
      "createdAt": "2025-08-30T06:02:18.741Z",
      "updatedAt": "2025-08-30T06:02:18.741Z",
      "relatedFiles": [
        {
          "path": "routes/web.php",
          "type": "TO_MODIFY",
          "description": "File routing yang akan ditambahkan rute AJAX",
          "lineStart": 100,
          "lineEnd": 150
        },
        {
          "path": "resources/views/front/course-catalog.blade.php",
          "type": "TO_MODIFY",
          "description": "File yang akan ditambahkan JavaScript AJAX",
          "lineStart": 100,
          "lineEnd": 122
        }
      ],
      "implementationGuide": "1. Buka file routes/web.php\n2. Tambahkan rute: Route::get('/courses/filter', [FrontController::class, 'filterCourses'])->name('courses.filter')\n3. Buka file resources/views/front/course-catalog.blade.php\n4. Tambahkan JavaScript untuk AJAX:\n   - Function fetchCourses(filters, page = 1)\n   - Function updateCoursesGrid(courses)\n   - Function updatePagination(pagination)\n   - Event listeners untuk form elements\n5. Implementasi debouncing untuk search input\n6. Handle loading states dan error responses",
      "verificationCriteria": "AJAX filtering berfungsi tanpa reload halaman, pagination bekerja dengan baik, search memiliki debouncing, dan error handling memberikan feedback yang jelas kepada user.",
      "analysisResult": "Implementasi fitur pencarian dan pemfilteran pada halaman katalog kursus front-end dengan menggunakan arsitektur repository pattern yang sudah ada, Alpine.js untuk interaktivitas, dan AJAX untuk real-time filtering. Solusi ini akan meningkatkan user experience dengan filtering yang responsif tanpa reload halaman, sambil mempertahankan konsistensi dengan desain dan arsitektur yang sudah ada."
    }
  ]
}